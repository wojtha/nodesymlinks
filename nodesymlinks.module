<?php
// $Id$

/**
 * @file
 * Node Symlinks allows creating duplicate menu links with unique id to all
 * nodes. As a result all these duplicates have unique menu trails and breadcrumbs.
 *
 * @author Vojtech Kusy <wojtha@gmail.com>, http://vojtechkusy.com
 *
 * Google answer about duplicates
 * http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=66359
 * Robots meta tag
 * http://www.robotstxt.org/meta.html
 *
 * NOTE: This module has weight 2, so it is launched after Pathauto (if present)
 *
 * @example
 * <META NAME="ROBOTS" CONTENT="NOINDEX, FOLLOW">
 * <META NAME="ROBOTS" CONTENT="INDEX, NOFOLLOW">
 * <META NAME="ROBOTS" CONTENT="NOINDEX, NOFOLLOW">
 *
 * CREDITS:
 * -- Backup table, admin page and some other fixes by Gordon Luk <gordon.luk@gmail.com>
 *    http://getluky.net/2009/05/29/drupal-module-node-multi-parenting/
 *
 */

/**
 * Implementation of hook_menu().
 */
function nodesymlinks_menu() {
  $items = array();

  $items['node/%node/mid/%'] = array(
      'title' => 'Content Duplicate',
      'page callback' => 'nodesymlinks_page',
      'page arguments' => array(1, 3),
      'title callback' => 'nodesymlinks_menu_title',
      'title arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('view', 1),
      'type' => MENU_CALLBACK,
  );

  $items['admin/settings/nodesymlinks'] = array(
      'title' => 'NodeSymlinks',
      'page callback' => 'nodesymlinks_admin',
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'nodesymlinks.admin.inc',
  );

  $items['admin/settings/nodesymlinks/list'] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );

  $items['admin/settings/nodesymlinks/settings'] = array(
      'title' => 'Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nodesymlinks_settings'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'nodesymlinks.admin.inc',
  );

  $items['nodesymlinks/ahah'] = array(
      'page callback' => 'nodesymlinks_ahah_handler',
      'access arguments' => array('administer nodesymlinks'),
      'type' => MENU_CALLBACK,
      'file' => 'nodesymlinks.inc',
  );

  return $items;
}

/**
 * Title callback for the menu overview page and links.
 */
function nodesymlinks_menu_title($node) {
  return $node->title;
}

/**
 * Implementation of hook_perm().
 */
function nodesymlinks_perm() {
  return array('administer nodesymlinks');
}

/**
 * Menu callback which loads and displays the content from the node wrapped
 * within the different menu and breadcrumbs. It also sets the robots META tag
 * to prevent duplicate search engine indexing.
 *
 * @param node $node
 * @param mlid $mid
 * @return HTML
 */
function nodesymlinks_page($node, $mid) {
  // don't allow duplicates to be indexed
  if (! drupal_is_front_page()) {
    drupal_set_html_head('<meta name="robots" content="noindex, follow">');
  }

  $output = '';
  if (node_access('update', $node)) {
    $output .= theme('nodesymlinks_edit_links', $node->nid);
  }
  // view as a full page
  $output .= node_view($node, FALSE, TRUE, FALSE);

  // create breadcrumb based on the menu path
  // NOTE: set breadcrumb *after* node_view() prevents our breadcrumbs to be changed in some other module
  drupal_set_breadcrumb(nodesymlinks_get_breadcrumbs());
  return $output;
}

/**
 * Generate breadcrumbs for current active menu trail. Return array of
 * breadcrumb links. Partly taken from function menutrails_get_breadcrumbs()
 *
 * @return array
 */
function nodesymlinks_get_breadcrumbs() {
  $item = menu_get_item();
  $menu = db_result(db_query("SELECT menu_name FROM {menu_links} WHERE link_path = '%s' AND module = 'nodesymlinks'", $item['href']));
  $tree = menu_tree_page_data($menu);
  $crumbs = array();
  if (variable_get('nodesymlinks_crumbs_include_home', 1)) {
    $crumbs[] = l(t('Home'), '<front>');
  }
  _nodesymlinks_recurse_crumbs($tree, $item, $crumbs);
  return $crumbs;
}

/**
 * Helper recursive function for generating breadcrumbs. Main part
 * of the code is taken from _menutrails_recurse_crumbs() function.
 *
 * @see _menutrails_recurse_crumbs(), nodesymlinks_get_breadcrumbs()
 */
function _nodesymlinks_recurse_crumbs($tree, $item, &$crumbs, $above = array()) {
  foreach ($tree as $menu_item) {
    if ($menu_item['link']['link_path'] == $item['href']) {
      foreach ($above as $trail_item) {
        $crumbs[] = l($trail_item['link']['link_title'], $trail_item['link']['link_path']);
      }
      // Last crumb can be: parent, current_plain ,current_link
      $last_crumb_type = variable_get('nodesymlinks_crumbs_lastcrumb', 'parent');
      if ($last_crumb_type == 'current_plain') {
        $crumbs[] = $menu_item['link']['link_title'];
      }
      elseif ($last_crumb_type == 'current_link') {
        $crumbs[] = l($menu_item['link']['link_title'], $menu_item['link']['link_path']);
      }
      break;
    }
    if (is_array($menu_item['below'])) {
      $above[] = $menu_item;
      _nodesymlinks_recurse_crumbs($menu_item['below'], $item, $crumbs, $above);
    }
  }
}


function _nodesymlinks_include($name = '') {
  $name = $name ? 'nodesymlinks.' . $name : 'nodesymlinks';
  module_load_include('inc', 'nodesymlinks', $name);
}

/**
 * Implementation of hook_pathauto().
 */
function nodesymlinks_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'nodesymlinks';
      $settings['token_type'] = 'nodesymlinks';
      $settings['groupheader'] = t('Nodesymlinks paths');
      $settings['patterndescr'] = t('Default path pattern (applies to all node types with blank patterns below)');
      $settings['patterndefault'] = '[nodesymlinks-menupath-raw]';
      $settings['bulkname'] = t('Bulk generate aliases for nodesymlinks that are not aliased');
      $settings['bulkdescr'] = t('Generate aliases for all existing nodesymlinks which do not already have aliases.');
      $node_settings = node_pathauto($op);
      $settings['placeholders'] = $node_settings->placeholders;
      // Next two settings is supported from Pathauto 2+
      // Pathauto 1.x simply calls $function = $module . '_pathauto_bulkupdate';
      $settings['batch_update_callback'] = '_nodesymlinks_pathauto_bulkupdate';
      $settings['batch_file'] = drupal_get_path('module', 'nodesymlinks') . '/nodesymlinks.pathauto.inc';
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Implementation of hook_pathauto_bulkupdate().
 *
 * @deprecated since Pathauto 2.x
 *
 * For Pathauto 1.x
 * @see pathauto.api.inc, pathauto.admin.inc:260
 */
function nodesymlinks_pathauto_bulkupdate() {
  _nodesymlinks_include('pathauto');
  _nodesymlinks_pathauto_bulkupdate();
}

/**
 * Implementation of hook_token_list().
 */
function nodesymlinks_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'nodesymlinks' || $type == 'all') {
    $tokens['nodesymlinks']['nodesymlinks-nodepath']           = t("The URL path of the node the nodesymlink belongs to.");
    $tokens['nodesymlinks']['nodesymlinks-menu']                = t("The name of the menu the node belongs to.");
    $tokens['nodesymlinks']['nodesymlinks-menu-raw']            = t("The name of the menu the node belongs to.");
    $tokens['nodesymlinks']['nodesymlinks-menupath']            = t("The menu path (as reflected in the breadcrumb), not including Home or [menu]. Separated by /.");
    $tokens['nodesymlinks']['nodesymlinks-menupath-raw']        = t("The unfiltered menu path (as reflected in the breadcrumb), not including Home or [menu]. Separated by /.");
    $tokens['nodesymlinks']['nodesymlinks-menu-link-title']     = t("The text used in the menu as link text for this item.");
    $tokens['nodesymlinks']['nodesymlinks-menu-link-title-raw'] = t("The unfiltered text used in the menu as link text for this item.");
    $tokens['nodesymlinks']['nodesymlinks-menu-link-mlid']      = t("The unique ID of the node's menu link.");
    $tokens['nodesymlinks']['nodesymlinks-menu-link-plid']      = t("The unique ID of the node's menu link parent.");

    // Access also node tokens
    if (variable_get('nodesymlinks_node_tokens', 0) && $type == 'nodesymlinks') {
      $tokens += token_get_list('node');
    }
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 *
 * @see node_token_values() in token_node.inc
 */
function nodesymlinks_token_values($type, $object = NULL, $options = array()) {
  $values = array();

  if ($type == 'nodesymlinks') {

    $values = array(
      'nodesymlinks-menupath' => '',
      'nodesymlinks-menupath-raw' => '',
      'nodesymlinks-menu' => '',
      'nodesymlinks-menu-raw' => '',
      'nodesymlinks-menu-link-title' => '',
      'nodesymlinks-menu-link-title-raw' => '',
      'nodesymlinks-menu-link-mlid' => '',
      'nodesymlinks-menu-link-plid' => '',
    );

    // Now get the menu related information.
    if (! empty($object['mlid'])) {
      // TODO: refactor this
      $mlid = $object['mlid'];
      $node = $object['node'];
      $menu_link = menu_link_load($mlid);
      $menus = menu_get_menus();
      $menu = isset($menus[$menu_link['menu_name']]) ? $menus[$menu_link['menu_name']] : '';
      $trail_raw = _menu_titles($menu_link, $node->nid);

      $trail = array();
      foreach ($trail_raw as $title) {
        $trail[] = check_plain($title);
      }

      $values['nodesymlinks-nodepath'] = ! empty($node->path) ? $node->path : 'node/'. $node->nid;
      $values['nodesymlinks-menupath'] = ! empty($options['pathauto']) ? $trail : implode('/', $trail);
      $values['nodesymlinks-menupath-raw'] = ! empty($options['pathauto']) ? $trail_raw : implode('/', $trail_raw);
      $values['nodesymlinks-menu'] = check_plain($menu);
      $values['nodesymlinks-menu-raw'] = $menu;
      $values['nodesymlinks-menu-link-title'] = check_plain($menu_link['title']);
      $values['nodesymlinks-menu-link-title-raw'] = $menu_link['link_title'];
      $values['nodesymlinks-menu-link-mlid'] = $menu_link['mlid'];
      $values['nodesymlinks-menu-link-plid'] = $menu_link['plid'];
    }
  }

  return $values;
}

/**
 * Implementation of hook_nodeapi().
 *
 * NOTE: This module has weight 2, so it is launched after Pathauto (if present)
 */
function nodesymlinks_nodeapi(&$node, $op) {
  switch ($op) {
    /* case 'load':
    if (!isset($node->nodesymlinks)) {
      // $node->nodesymlinks['items'] = nodesymlinks_get_items_by_nid($node->nid);
      }
      break; */
    /* case 'view':
      if (isset($node->nodesymlinks_breadcrumb_override)) {
      // We must set the crumb here because otherwise, other modules that set
      // breadcrumb within the nodeapi will overwrite it.
      $item = menu_get_item();
      menu_set_item(NULL, $item);
      }
      break; */
    case 'validate':
      if (isset($node->menu['nodesymlinks'])) {
        _nodesymlinks_include();
        _nodesymlinks_nodeapi_validate($node, $op);
      }
      break;
    case 'insert':
    case 'update':
      if (isset($node->menu['nodesymlinks'])) {
        _nodesymlinks_include();
        _nodesymlinks_nodeapi_insert_update($node, $op);
      }
      break;
    case 'delete':
      _nodesymlinks_include();
      _nodesymlinks_nodeapi_delete($node, $op);
      break;
    case 'prepare':
    case 'presave':
      if (empty($node->nodesymlinks)) {
        _nodesymlinks_include();
        _nodesymlinks_nodeapi_prepare_presave($node, $op);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter(). Adds nodesymlinks item fields to the node form.
 */
function nodesymlinks_form_alter(&$form, $form_state, $form_id) {
  // Check for node form and also check if 'menu' exists - some modules like Menuless Nodetype
  // or Content Type Menu are able to unset menu at certain node types.
  if (isset($form['#node']) && ($form['#node']->type . '_node_form' == $form_id) && isset($form['menu'])) {
    _nodesymlinks_include();
    _nodesymlinks_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Implementation of hook_theme()
 */
function nodesymlinks_theme() {
  return array(
    'nodesymlinks_form_items' => array(
      'arguments' => array('form' => array()),
      'file' => 'nodesymlinks.inc'
    ),
    'nodesymlinks_edit_links' => array(
      'arguments' => array('nid' => NULL),
    ),
  );
}

/**
 * Theme view/edit links for original node.
 *
 * @param $nid
 *   The node id of the original node.
 * @return
 *   The themed HTML output.
 */
function theme_nodesymlinks_edit_links($nid) {
  $text = t('Original node: !view | !edit', array(
              '!view' => l(t('View'), 'node/' . $nid),
              '!edit' => l(t('Edit'), 'node/' . $nid . '/edit')));
  return '<div class="nodesymlinks_edit_links">' . $text . "</div>\n";
}